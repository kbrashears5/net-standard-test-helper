parameters:
  ArtifactName: ''
  FolderName: ''

stages:
- stage: 'Build'
  variables:
    SourceFolderName: 'src'
    SolutionName: '${{ parameters.SolutionName }}'
    InstallFolderName: 'setup'
    ReleaseFolderPath: '$(System.DefaultWorkingDirectory)\$(SourceFolderName)\$(FolderName)\bin\Release'

  jobs:
  - job: Build
    # defines agent pool and demands (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#pool)
    pool:
      vmImage: ubuntu-16.04

    # steps to run
    steps:
    # get sources (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#checkout)
    - checkout: self
      clean: true

    # build & test
    - template: templates/build-dotnet.yml@templates
      parameters:
        solution: '$(SolutionName)'
        test: true
        codeCoverage: false

    # stage build output
    - task: CopyFiles@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Stage Build Output'
      inputs:
        SourceFolder: '$(ReleaseFolderPath)'
        TargetFolder: '$(Build.BinariesDirectory)'
        Contents: '*.*'
        CleanTargetFolder: true
        OverWrite: false

    # create a zip file with the build results
    - task: ArchiveFiles@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Archive Build Output'
      inputs:
        archiveType: zip
        replaceExistingArchive: true
        rootFolderOrFile: $(Build.BinariesDirectory)
        includeRootFolder: false
        archiveFile: $(Build.ArtifactStagingDirectory)/$(FolderName).zip

    # publish artifact
    - task: PublishPipelineArtifact@0
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Publish Artifact'
      inputs:
        artifactName: $(ArtifactName)
        targetPath: '$(Build.ArtifactStagingDirectory)'